What happens when you initialize a repository? Why do you need to do it?
  An empty .git file is created inside whatever folder you are currently in.
  This is necessary in order to keep track of commits and branches

How is the staging area different from the working directory and the repository?
What value do you think it offers?
  The staging area is what's about to be committed, whereas the working
  directory is all of the files that I am working on, and the repository is
  snapshots of all of the files that have been committed

How can you use the staging area to make sure you have one commit per logical
change?
  The staging area makes it very clear which files are about to be committed,
  and using diff I am also able to see specifically what the commit will be.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
  Branches are helpful when keeping track fo multiple versions, modes, or
  experimental features of a product.

How do the diagrams help you visualize the branch structure?
  The diagrams let me see clearly what changes were made on each branch, their
  parents, and how they all connect.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
  The result is a code containing all of the changes from one branch added to
  another branch. We represent it like that in the diagram because it shows
  all of the parents of the merged branch.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
  It automatically merges new content with the old without you having to do any
  work, but if the same line is edited on both sides of the merge, you will
  have to manually fix the error. If you do all merges manually, it's a lot more
  work, but the computer won't give you any merge errors.
